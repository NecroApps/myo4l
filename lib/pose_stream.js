// Generated by CoffeeScript 1.8.0
(function() {
  var EventEmitter, LOCKING_NONE, LOCKING_STANDARD, Pose,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  LOCKING_NONE = 0;

  LOCKING_STANDARD = 1;

  Pose = (function(_super) {
    __extends(Pose, _super);

    function Pose(opt) {
      this.newData = __bind(this.newData, this);
      Pose.__super__.constructor.apply(this, arguments);
      this.lockingPolicy = (opt != null ? opt.policy : void 0) || 0;
      this.locked = true;
    }

    Pose.prototype.setLockingPolicy = function(lockingPolicy) {
      this.lockingPolicy = lockingPolicy;
    };

    Pose.prototype.lock = function() {
      this._locked = true;
      return this.emit('locked');
    };

    Pose.prototype.newData = function(raw) {
      var type, val, xdir;
      type = raw.readUInt8(0);
      val = raw.readUInt8(1);
      xdir = raw.readUInt8(2);
      if (type === 1) {
        return this.emit('arm', [val, xdir]);
      } else if (type === 2) {
        return this.emit('arm', [0, 0]);
      } else if (type === 3) {
        return this.emit('pose', val);
      } else if (type === 4) {
        this._locked = false;
        return this.emit('unlocked');
      } else if (type === 5) {
        this._locked = true;
        return this.emit('locked');
      } else if (type === 6) {
        return this.emit('unsynced');
      } else {
        return this.emit('error', new Error('unknown classifier: ' + type));
      }
    };

    return Pose;

  })(EventEmitter);

  module.exports = Pose;

}).call(this);
